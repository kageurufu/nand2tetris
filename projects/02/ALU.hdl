// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        Mux16(a=x, b=false, sel=zx, out=zeroedX);
        Not16(in=zeroedX, out=notZeroedX);
        Mux16(a=zeroedX, b=notZeroedX, sel=nx, out=readyX);

        Mux16(a=y, b=false, sel=zy, out=zeroedY);
        Not16(in=zeroedY, out=notZeroedY);
        Mux16(a=zeroedY, b=notZeroedY, sel=ny, out=readyY);

        And16(a=readyX, b=readyY, out=andXY);
        Add16(a=readyX, b=readyY, out=addXY);

        Mux16(a=andXY, b=addXY, sel=f, out=tempOut);

        Not16(in=tempOut, out=notOut);
        
        // buffer final value for register calculations 
        Mux16(a=tempOut, b=notOut, sel=no, out[0..7]=outBufferLow, out[8..14]=outBufferHigh, out[15]=outBufferNegative);

        // map outBuffer to out
        Or16(a[0..7]=outBufferLow, a[8..14]=outBufferHigh, a[15]=outBufferNegative, b=false, out=out);

        // zr
        Or8Way(in=outBufferLow, out=anyOutBit0);
        Or8Way(in[0..6]=outBufferHigh, in[7]=outBufferNegative, out=anyOutBit1);
        Or(a=anyOutBit0, b=anyOutBit1, out=anyOutBit);
        Not(in=anyOutBit, out=zr);

        // ng
        And(a=outBufferNegative, b=true, out=ng);
}